@startuml
class Server {
    create_db_schema()
    check_table_existence()
    execute_query()
    create_socket()
    listen_for_connections()
    listen_for_messages()
    handle_connections()
    send_packet()
    handle_data()
    initialize_models()
    initialize_strategy()
    get_device()
    give_labels()
    aggregate_global_model()
        ip
    port
    device
    server_model
    client_model
    classifier_model
    recvd_initial_weights
    server_socket
    strategy
    plan
    __init__()
}

class ServerModel {
    forward()
        conv5
    fc1
    fc2
    fc3
    relu
    __init__()
}

class FL_Strategy {
    read_conf_file()
    decode_args()
    __repr__()
        MIN_PARTICIPANTS_START
    MIN_PARTICIPANTS_FIT
    GLOBAL_TRAINING_ROUNDS
    BATCH_SIZE
    LEARNING_RATE
    CRITERION
    OPTIMIZER
    __init__()
}

class FL_Plan {
    __repr__()
        GLOBAL_TRAINING_ROUNDS
    LEARNING_RATE
    CRITERION
    OPTIMIZER
    BATCH_SIZE
    model_weights
    classifier_weights
    __init__()
}

FL_Plan "1" -- "1"FL_Strategy: has

class Client {
    create_socket()
    listen_for_messages()
    send_packet()
    handle_packets()
    handle_fl_plan()
    get_dataset()
    get_dataloader()
    get_device()
    get_labels()
    train_one_epoch()
    validate()
        server_ip
    server_port
    client_ip
    client_port
    client_model
    classifier_model
    device
    server_socket
    fl_plan
    criterion
    model_optimizer
    classifier_optimizer
    server_labels
    true_labs
    __init__()
}

class CustomDataset {
    __len__()
    __getitem__()
        data
    labels
    __init__()
}
Dataset <|-- CustomDataset

class ClientModel {
    forward()
        conv1
    conv2
    conv3
    conv4
    relu
    pool
    __init__()
}
class ClientClassifier {
    forward()
        fc1
    __init__()
}
@enduml